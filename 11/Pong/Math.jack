// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array bit_check_array;
    static int div_remain;

    /** Initializes the library. */
    function void init() {
    let bit_check_array = Array.new(16);
    let bit_check_array[0] = 1;
    let bit_check_array[1] = 2;
    let bit_check_array[2] = 4;
    let bit_check_array[3] = 8;
    let bit_check_array[4] = 16;
    let bit_check_array[5] = 32;
    let bit_check_array[6] = 64;
    let bit_check_array[7] = 128;
    let bit_check_array[8] = 256;
    let bit_check_array[9] = 512;
    let bit_check_array[10] = 1024;
    let bit_check_array[11] = 2048;
    let bit_check_array[12] = 4096;
    let bit_check_array[13] = 8192;
    let bit_check_array[14] = 16384;
    let bit_check_array[15] = ^16384;
    return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    if (x < 0) {
        let x = -x ;
        }

    return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
    var int sum, shift_x, i;
    let sum = 0 ;
    let i = 0 ;
    let shift_x = x;
    while (i < 16 ){
        if (Math.bit(y, i)){
            let sum = sum + shift_x;
        }
        let shift_x = ^(shift_x);
        let i = i +1 ;
    }
    return sum;
    }


    function int bit(int number, int index){
      return (~(((bit_check_array[index])&(number)) = 0));
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
    var int is_x_neg , is_y_neg , func_x , func_y;

    if (y = 0){
        do Sys.error(3);
    }

    let is_x_neg = 0;
    let is_y_neg = 0;
    let func_x = x;
    let func_y = y;

    if (y < 0){
        let func_y = -y;
        let is_y_neg = 1;
    }

     if (x < 0){
        let func_x = -x;
        let is_x_neg = 1 ;
    }

     if (func_y > func_x ){
        return 0;
        }
    let div_remain = 0;
     if (~(is_x_neg = is_y_neg)){
         return -Math.div_helper(func_x, func_y);
        }
    return Math.div_helper(func_x, func_y);
    }

    function int div_helper(int x, int y) {
    var int q;
    if (y > x | y < 0){
        return 0;
        }
    let q = Math.div_helper(x, y+y);
    if (y > (x - div_remain)){
        return ^(q);
        }
    else{
        let div_remain = div_remain + y;
        return ^(q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    var int y, j ,temp;
    let y = 0 ;
    let j = 7 ; // #(16) - 1
    while (j > -1){
        let temp = (y + bit_check_array[j]) * (y + bit_check_array[j]);

        if((~(temp > x)) & (temp > 0)){
            let y = y + bit_check_array[j];
            }

        let j = j - 1 ;

        }
    return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    if (a > b){
        return a;
        }

    return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
     if (a < b){
        return a;
        }
     else{
        return b;
     }

    }

}