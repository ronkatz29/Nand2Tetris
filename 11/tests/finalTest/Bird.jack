
class Bird{

	field int height, memAddress;
	field boolean lose, jumpNum;
	
	
	constructor Bird new() {
		let height = 127;
		let lose = false;
		let jumpNum = false;
	
		return this;
	}
	
	method void drawBird(boolean jump){
		
		if (jump){
			let memAddress = 32*(height+1) + 9;
			if (jumpNum){
				do Memory.poke(16384 + memAddress + 0, 0);
				do Memory.poke(16384 + memAddress + 32, 0);
				do Memory.poke(16384 + memAddress + 64, 0);
				do Memory.poke(16384 + memAddress + 96, 0);
				do Memory.poke(16384 + memAddress + 128, 0);
				do Memory.poke(16384 + memAddress + 160, 0);
				do Memory.poke(16384 + memAddress + 192, 0);
				do Memory.poke(16384 + memAddress + 224, 0);
				do Memory.poke(16384 + memAddress + 256, 0);
				do Memory.poke(16384 + memAddress + 288, 0);
				do Memory.poke(16384 + memAddress + 320, 0);
				do Memory.poke(16384 + memAddress + 352, 0);
			}
			else {
				do Memory.poke(16384 + memAddress + 0, 0);
				do Memory.poke(16384 + memAddress + 32, 0);
				do Memory.poke(16384 + memAddress + 64, 0);
				do Memory.poke(16384 + memAddress + 96, 0);
				do Memory.poke(16384 + memAddress + 128, 0);
				do Memory.poke(16384 + memAddress + 160, 0);
				do Memory.poke(16384 + memAddress + 192, 0);
				do Memory.poke(16384 + memAddress + 224, 0);
				do Memory.poke(16384 + memAddress + 256, 0);
				do Memory.poke(16384 + memAddress + 288, 0);
				do Memory.poke(16384 + memAddress + 320, 0);
				do Memory.poke(16384 + memAddress + 352, 0);
			}
			
		}
		else {
			let memAddress = 32*(height-1) + 9;
			if (jumpNum){
				do Memory.poke(16384 + memAddress + 0, 0);
				do Memory.poke(16384 + memAddress + 32, 0);
				do Memory.poke(16384 + memAddress + 64, 0);
				do Memory.poke(16384 + memAddress + 96, 0);
				do Memory.poke(16384 + memAddress + 128, 0);
				do Memory.poke(16384 + memAddress + 160, 0);
				do Memory.poke(16384 + memAddress + 192, 0);
				do Memory.poke(16384 + memAddress + 224, 0);
				do Memory.poke(16384 + memAddress + 256, 0);
				do Memory.poke(16384 + memAddress + 288, 0);
				do Memory.poke(16384 + memAddress + 320, 0);
				do Memory.poke(16384 + memAddress + 352, 0);
			}
			else {
				do Memory.poke(16384 + memAddress + 0, 0);
				do Memory.poke(16384 + memAddress + 32, 0);
				do Memory.poke(16384 + memAddress + 64, 0);
				do Memory.poke(16384 + memAddress + 96, 0);
				do Memory.poke(16384 + memAddress + 128, 0);
				do Memory.poke(16384 + memAddress + 160, 0);
				do Memory.poke(16384 + memAddress + 192, 0);
				do Memory.poke(16384 + memAddress + 224, 0);
				do Memory.poke(16384 + memAddress + 256, 0);
				do Memory.poke(16384 + memAddress + 288, 0);
				do Memory.poke(16384 + memAddress + 320, 0);
				do Memory.poke(16384 + memAddress + 352, 0);
			}
		}
		let memAddress = 32*height + 9;
		if (jumpNum){
				do Memory.poke(16384 + memAddress + 0, 60);
				do Memory.poke(16384 + memAddress + 32, 66);
				do Memory.poke(16384 + memAddress + 64, 16194);
				do Memory.poke(16384 + memAddress + 96, 16580);
				do Memory.poke(16384 + memAddress + 128, 20610);
				do Memory.poke(16384 + memAddress + 160, 16516);
				do Memory.poke(16384 + memAddress + 192, -32636);
				do Memory.poke(16384 + memAddress + 224, -16188);
				do Memory.poke(16384 + memAddress + 256, -32668);
				do Memory.poke(16384 + memAddress + 288, 24600);
				do Memory.poke(16384 + memAddress + 320, 6192);
				do Memory.poke(16384 + memAddress + 352, 2016);
			}
			else {
				do Memory.poke(16384 + memAddress + 0, 0);
				do Memory.poke(16384 + memAddress + 32, 0);
				do Memory.poke(16384 + memAddress + 64, 16158);
				do Memory.poke(16384 + memAddress + 96, 16609);
				do Memory.poke(16384 + memAddress + 128, 20609);
				do Memory.poke(16384 + memAddress + 160, 16513);
				do Memory.poke(16384 + memAddress + 192, -32638);
				do Memory.poke(16384 + memAddress + 224, -16190);
				do Memory.poke(16384 + memAddress + 256, -32668);
				do Memory.poke(16384 + memAddress + 288, 24600);
				do Memory.poke(16384 + memAddress + 320, 6192);
				do Memory.poke(16384 + memAddress + 352, 2016);
			}
	
		return;
	}
	
	method void draw(boolean jump){
		do Screen.setColor(false);
		if (jump){
			do Screen.drawCircle(150, height+1, 3);
		}
		else {
			do Screen.drawCircle(150, height-1, 3);
		}
		do Screen.setColor(true);
		do Screen.drawCircle(150, height, 3);
		return;
	}
	
	method void heightDrop(boolean jump){
		if (height > 240){
			let memAddress = 32*(height-1) + 9;
			if (jumpNum){
				do Memory.poke(16384 + memAddress + 0, 0);
				do Memory.poke(16384 + memAddress + 32, 0);
				do Memory.poke(16384 + memAddress + 64, 0);
				do Memory.poke(16384 + memAddress + 96, 0);
				do Memory.poke(16384 + memAddress + 128, 0);
				do Memory.poke(16384 + memAddress + 160, 0);
				do Memory.poke(16384 + memAddress + 192, 0);
				do Memory.poke(16384 + memAddress + 224, 0);
				do Memory.poke(16384 + memAddress + 256, 0);
				do Memory.poke(16384 + memAddress + 288, 0);
				do Memory.poke(16384 + memAddress + 320, 0);
				do Memory.poke(16384 + memAddress + 352, 0);
			}
			else {
				do Memory.poke(16384 + memAddress + 0, 0);
				do Memory.poke(16384 + memAddress + 32, 0);
				do Memory.poke(16384 + memAddress + 64, 0);
				do Memory.poke(16384 + memAddress + 96, 0);
				do Memory.poke(16384 + memAddress + 128, 0);
				do Memory.poke(16384 + memAddress + 160, 0);
				do Memory.poke(16384 + memAddress + 192, 0);
				do Memory.poke(16384 + memAddress + 224, 0);
				do Memory.poke(16384 + memAddress + 256, 0);
				do Memory.poke(16384 + memAddress + 288, 0);
				do Memory.poke(16384 + memAddress + 320, 0);
				do Memory.poke(16384 + memAddress + 352, 0);
			}
			do Memory.poke(16384 + memAddress + 0, 26592);
			do Memory.poke(16384 + memAddress + 32, -25576);
			do Memory.poke(16384 + memAddress + 64, -30714);
			do Memory.poke(16384 + memAddress + 96, -31231);
			do Memory.poke(16384 + memAddress + 128, 17155);
			do Memory.poke(16384 + memAddress + 160, 16641);
			do Memory.poke(16384 + memAddress + 192, 12546);
			do Memory.poke(16384 + memAddress + 224, 6410);
			do Memory.poke(16384 + memAddress + 256, 1794);
			do Memory.poke(16384 + memAddress + 288, 252);
			let lose = true;
			return;
		}
		let height = height + 1;
		do drawBird(jump);
		
		return;
	}
	
	method void update(boolean jump){
		if (jump) {
			do jump(jump);
			return;
		}
		do heightDrop(jump);
		return;
	}
	
	
	method void jump(boolean jump){
		let jumpNum = ~(jumpNum);
		if (height < 4){
			let lose = true;
			return;
		}
		let height = height - 1;
		do drawBird(jump);
		
		return;
	}
	
	method int getH(){ return height;}
	
	
	method boolean isLose(){
		return lose;
	}
	
	method void setLose(){
		let lose = true;
		return;
	}
	
	method void dispose(){
	do Memory.deAlloc(this);
	return;
	}


}