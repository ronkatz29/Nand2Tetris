// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array a, shifts;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i, shift;
        let i = 0;
        let shift = 1;
        let shifts = Array.new(16);
        let a = 16384;
        let color = true;
        while (i < 16) {
            let shifts[i] = shift;
            let shift = shift + shift;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while(i < 24576) {
            let a[i] = -1;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, mod, b;
        let address = 16384 + (^(^(^(^(^(y)))))) + (#(#(#(#(x)))));
        let value = Memory.peek(address);
        let mod = 15 & x;
        let mod = shifts[mod];
        if(color){
            let b = value | mod;
        } else {
            let b = (~mod) & (value);
        }
        do Memory.poke(address, b);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int minY, maxY, minX, maxX, idx, dx, dy, a, b, bdx, ady;
        let minX = Math.min(x1,x2);
        let maxX = Math.max(x1,x2);
        let minY = Math.min(y1,y2);
        let maxY = Math.max(y1,y2);
        if (x1 = x2) {
            let idx = minY;
            while (~(idx > maxY)) {
                do Screen.drawPixel(x1, idx);
                let idx = idx + 1;
            }
            return;
        }

        if (y1 = y2) {
            let idx = minX;
            while (~(idx > maxX)) {
                do Screen.drawPixel(idx, y1);
                let idx = idx + 1;
            }
            return;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0;
        let b = 0;
        let ady = 0;
        let bdx = 0;

        if((dx > 0) & (dy > 0)) {
            while( (~((a+x1) > x2)) & (~((b+y1) > y2))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (Math.abs(ady) < Math.abs(bdx)) {
                    let a = a + 1;
                    let ady = ady + dy;
                }
                else {
                    let b = b + 1;
                    let bdx = bdx + dx;
                }
            }
            return;
        }

        if((dx < 0) & (dy < 0)) {
            while( (~((a+x1) < x2)) & (~((b+y1) < y2))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (ady > bdx) {
                    let a = a - 1;
                    let ady = ady + dy;
                }
                else {
                    let b = b - 1;
                    let bdx = bdx + dx;
                }
            }
            return;
        }

        if((dx > 0) & (dy < 0)) {
            while( (~((a+x1) > x2)) & (~((b+y1) < y2)) ) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (ady < bdx) {
                    let b = b - 1;
                    let bdx = bdx - dx;
                }
                else {
                    let a = a + 1;
                    let ady = ady + dy;
                }
            }
            return;
        }

        if((dx < 0) & (dy > 0)) {
            while( (~((a+x1) < x2)) & (~((b+y1) > y2)) ) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (ady < bdx) {
                    let b = b + 1;
                    let bdx = bdx + dx;
                }
                else {
                    let a = a - 1;
                    let ady = ady - dy;
                }
            }
            return;
        }
        return;
}

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int maxY, minY, diff, i;
        let minY = Math.min(y1, y2);
        let maxY = Math.max(y1, y2);
        let diff = maxY - minY;
        while(i < diff) {
            do Screen.drawLine(x1, y1 + i, x2, y1 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx, square_r;
        let square_r = r * r;
        let dy = r;
        while (dy > -1) {
            let dx = Math.sqrt(square_r - (dy * dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            do Screen.drawLine(x - dx, y - dy, x + dx, y - dy);
            let dy = dy - 1;
        }
        return;
    }
}
