// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len, max_len;
    field Array str;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let max_len = maxLength;
        if (max_len < 1){
            let max_len = 1;
        }
        let len = 0;
        let str = Array.new(max_len);

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        let len = 0;
        let max_len = 0;
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if(j > len){
            //TODO
        }
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if(j > len){
            //TODO
        }
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(len > (max_len - 1)){
            //TODO
        }
        let str[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(len < 1){
            //TODO
        }
        let len = len - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        var bool is_neg;

        let is_neg = false;
        let val = 0;
        let i = 0;

        if(str[i] = 45 ){
            let i = i + 1;
            let is_neg = true;
        }
        
        while(i < len){
            let d = charAt(i); 
            let val = ((^(val) + ^(^(^(val))))); // val * 10 == val << 1 + val << 3

            let val = val + (d - 48);
            let i = i + 1;
        }

        if(is_neg){
            let val = -(val);
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int value;
        var bool is_neg;
        let value = val;
        let is_neg = false;
        let len = 0;
        if (val < 0){
            let is_neg = true;
            let value = -(val);
            do appendChar(45);
        }
        do str_two_int(value, is_neg);
        return;
    }

    method void str_two_int(int val, bool is_neg){
            var int value, i, last_dig, j, q, r, div_ten;
            var char temp; 
            let value = val;
            while(value > 0  )
            {
                // let div_ten = value / 10;
                let q = #(value) + #(#(value));
                let q = q + #(#(#(#(q))));
                let q = q + #(#(#(#(#(#(#(#(q))))))));
                let q = q + #(#(#(#(#(#(#(#(#(#(#(#(#(#(#(#(q))))))))))))))));
                let q = #(#(#(q)));
                let r = value - (^((^(^(q))) + q));
                let div_ten = q + (r > 9);

                let last_dig = (value - ((^(div_ten) + ^(^(^(div_ten))))));  // same as mod

                let value = div_ten;
                do appendChar(last_dig + 48 );
            }



            let i = len ; 
            let last_dig = 0 ;
            
            if(is_neg){
                let last_dig = last_dig + 1;
            }
            while (last_dig < i)
            {   
                let j = len - last_dig - 1;
                if(is_neg){
                    let j = j + 1;
                }
                let temp = str[j];
                let str[j] = str[last_dig];
                let str[last_dig] = temp;      

                let i = i - 1 ; 
                let last_dig = last_dig + 1 ;
            }


            return; 


        // var int value, dig_to_append, div_ten, q, r;
        // let value = val;
		// if (value > 0){
        //     // let div_ten = value / 10;
        //     let q = #(value) + #(#(value));
        //     let q = q + #(#(#(#(q))));
        //     let q = q + #(#(#(#(#(#(#(#(q))))))));
        //     let q = q + #(#(#(#(#(#(#(#(#(#(#(#(#(#(#(#(q))))))))))))))));
        //     let q = #(#(#(q)));
        //     let r = val - (^((^(^(q))) + q));
        //     let div_ten = q + (r > 9);

		// 	let dig_to_append = (value - ((^(div_ten) + ^(^(^(div_ten))))));  // same as mod
		// 	let value = div_ten;
		// 	do str_two_int(value);
		// 	do appendChar(dig_to_append + 48); 
		// }
		// return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
