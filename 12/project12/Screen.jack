// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static bool color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    var int i;
    let i = 0;
    while (i < 8192){
        let screen[i] = 0;
        let i = i + 1;
    }
    return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int cur_address, bit_to_fill, mod_16;
        let cur_address = (^(^(^(^(^(y)))))) + (#(#(#(#(x))))); // 32*y + x/16
        let mod_16 = x & 15;
        let bit_to_fill = 0;
        while(mod_16 > 0){
            let bit_to_fill = ^(bit_to_fill);
            let mod_16 = mod_16 - 1;
        }
        if (color){
            let screen[cur_address] = screen[cur_address] | bit_to_fill; //set black
            }
        else{
            let screen[cur_address] = screen[cur_address] & (~bit_to_fill); //set white
             }
      return;
    }

    function void drawLineHorizintal(int x1, int y1, int x2){
        while (x1 < x2 + 1){
            do Screen.drawPixel(x1,y1);
            let x1 = x1 + 1;
        }
        return;
    }
    
    function void drawLineVertical(int x1, int y1, int y2){
        while (y1 < y2 + 1){
            do Screen.drawPixel(x1,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a,b,dy,dx,diff;
        if (x1 = x2 & y1 = y2){
            do Screen.drawPixel(x1,y2);
            return;
        }
        if(x1 > x2){ // swap
            let x2 = x1 + x2;
            let x1 = x2 - x1;
            let x2 = x2 - x1;

            let y2 = y1 + y2;
            let y1 = y2 - y1;
            let y2 = y2 - y1;
        }
        if(y1 = y2){ // handle harozontal line
           do Screen.drawLineHorizintal(x1, y1, x2);
           return;
        }
        if(x1 = x2){ // handle harozontal line
            do Screen.drawLineVertical(x1, y1, y2);
            return;
        }
        let a = 0;
        let b = 0;
        let diff = 0;
        let dx = x2 - x1;
        let dy = Math.abs(y2 - y1);
        if (y2 > y1){ // goint right and up
            while((a < dx + 1) & (b < dy + 1)){
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0){
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else{
                    let b = b + 1;
                    let diff = diff -  dx;
                }
            }
        }
        else{ // doing right and down
            while((a < dx + 1) & (b < dy + 1)){
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0){
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else{
                    let b = b + 1;
                    let diff = diff -  dx;
                }
            }
        }
        return;
        
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        //check if need minimum;
        while(y2 < y1 + 1){
            do Screen.drawLine(x1, y2, x2 ,y2);
            let y2 = y2 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int part_radius, cur_line_len, cur_x_l, cur_x_r, cur_y_d, cur_y_u;
        let part_radius = r;
        while ((part_radius > -1)){
            let cur_line_len = Math.sqrt((r*r) - (part_radius*part_radius));
            let cur_x_l = x - cur_line_len;
            let cur_x_r = x + cur_line_len;
            let cur_y_d = y - part_radius;
            let cur_y_u = y + part_radius;
            do Screen.drawLine(cur_x_l, cur_y_u, cur_x_r, cur_y_u);
            do Screen.drawLine(cur_x_l, cur_y_d, cur_x_r, cur_y_d);
            let part_radius = part_radius - 1;
            }
        return;
        }
}
