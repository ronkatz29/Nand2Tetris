// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int freeList;


    /** Initializes the class. */
    function void init() {

        let ram = 0;
        let freeList = 2048;
        let ram[freeList] = 14335; //length - size
        let ram[freeList + 1] = 0; //next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int wanted_size) {
        var int cur_list, cur_list_size, block;
        let cur_list = freeList;
        let block = 0;
        let cur_list_size = ram[cur_list];
        if(wanted_size < 1){
            do Sys.error(5); // Print "Allocated memory size must be positive"
            return -1;
        }

        while(~(cur_list  = 0)){
            let cur_list_size = ram[cur_list];
            if(cur_list_size > wanted_size){
                let block = cur_list + ram[cur_list] - wanted_size - 1; // getting to the start of the wanted place in the memory
                let ram[block] = wanted_size + 1; // Setting the size of the block
                let ram[cur_list] = ram[cur_list] - wanted_size - 1;
                return block +1 ;
            }

            else {
                let cur_list = ram[cur_list +1];
            }
        }

        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = freeList; // change the pointer to the current freeList
        let freeList = o - 1 ;
        return;
        }
}
