// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram, heap, p;


    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let p = heap;
        let heap[0] = null;
        let heap[1] = 14334;
        return;
      }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array q;
        var int tmp;
        let q = p;
        while(~(q = null)){
            if(q[1] > (size + 1)){
                let tmp = q[1];
                let q[1] = q[1] - size - 2;
                let q[tmp - size + 1] = size;
                return q + tmp + 2 - size;
            }
            let q = q[0];
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[-2] = p;
        let p = o - 2;
        return;
    }

    /** Returns the maximal element contained in the given Array/object. */
	function int max(Array o) {
	    var int size, i, max;
	    let i = 0;
	    let max = o[0];
	    let size = o[-1];
	    while( i < size ) {
	        if (o[i] > max) {
	            let max = o[i];
            }
            let i = i + 1;
	    }
	    return max;
    }
}
