// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen,powers;
    static bool color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        let powers = Array.new(16);
        let powers[0] = 1;
        let powers[1] = 2;
        let powers[2] = 4;
        let powers[3] = 8;
        let powers[4] = 16;
        let powers[5] = 32;
        let powers[6] = 64;
        let powers[7] = 128;
        let powers[8] = 256;
        let powers[9] = 512;
        let powers[10] = 1024;
        let powers[11] = 2048;
        let powers[12] = 4096;
        let powers[13] = 8192;
        let powers[14] = 16384;
        let powers[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
    var int i;
    let i = 0;
    while (i < 8192){
        let screen[i] = 0;
        let i = i + 1;
        }
    return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int cur_address, mod_16,bit_to_fill;
        let cur_address = (^(^(^(^(^(y)))))) + (#(#(#(#(x))))); // 32*y + x/16
        let mod_16 = x & 15;
        let bit_to_fill = powers[mod_16];
        if (color){
            let screen[cur_address] = screen[cur_address] | bit_to_fill; //set black
            }
        else{
            let screen[cur_address] = screen[cur_address] & (~bit_to_fill); //set white
             }
      return;
    }

    function void drawLineHorizontal(int minX, int y1, int maxX){
        // while (~(minX > maxX)) {
        //    do Screen.drawPixel(minX, y1);
        //    let minX = minX + 1;
        //    }
        //    return;
        var int cur_address_start, mod_16,bit_to_fill, cur_address_end, i;
        let i = 0;
        let cur_address_start = (^(^(^(^(^(y1)))))) + (#(#(#(#(minX))))); // 32*y + x/16
        let cur_address_end = (^(^(^(^(^(y1)))))) + (#(#(#(#(maxX)))));
        let mod_16 = minX & 15;
        while((mod_16 < 16)){ //left address pixcels
            if (color){
                let screen[cur_address_start] = screen[cur_address_start] | powers[mod_16]; //set black
            }
            else{
                let screen[cur_address_start] = screen[cur_address_start] & (~powers[mod_16]); //set white
            }
            let mod_16 = mod_16 + 1;
        }
        let cur_address_start = cur_address_start + 1;
        while(cur_address_start < cur_address_end){ //middle
            let screen[cur_address_start] = color;
            let cur_address_start = cur_address_start + 1;
        }
        let mod_16 = maxX & 15;
        while(i < mod_16 + 10) //right address pixcels
        {
            if (color){
                let screen[cur_address_end] = screen[cur_address_end] | powers[i]; //set black
            }
            else{
                let screen[cur_address_end] = screen[cur_address_end] & (~powers[i]); //set white
            }
            let i = i + 1;
        }
        return;
    }
    
    
    function void drawLineVertical(int x1, int y1, int y2){
         var int minY, maxY;
         let minY = y1;
         let maxY = y2;
         if (minY > maxY)
            {
                let minY = minY + maxY;
                let maxY = minY - maxY;
                let minY = minY - maxY;
            }

         while (~(minY > maxY)) {
               do Screen.drawPixel(x1, minY);
               let minY = minY + 1;
           }
           return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
         var int leftY, rightY, leftX, rightX, dX, dY, a, b, difX, difY ;

         var int minY, maxY, minX, maxX, idx, dx, dy, a, b, bdx, ady;


         let leftX = x1;
         let rightX = x2;

         let leftY = y1;
         let rightY = y2;

         //Swap if needed
         if(leftX > rightX){
            let leftX = leftX + rightX;
            let rightX = leftX - rightX;
            let leftX = leftX - rightX;
            //keep the dots to be together.
            let leftY = leftY + rightY;
             let rightY = leftY - rightY;
             let leftY = leftY - rightY;
         }

        if (leftX = rightX) {
            do Screen.drawLineVertical(leftX,  leftY, rightY);
            return;
        }

        if (leftY = rightY) {
           do Screen.drawLineHorizontal(leftX,  leftY, rightX);
            return;
        }

        let a = 0;
        let b = 0;

        let dX = rightX - leftX;
        let dY = rightY - leftY;

        let difY = 0;
        let difX = 0;

        if(leftY < rightY) {
            while( (~((a+leftX) > rightX)) & (~((b+leftY) > rightY))) {
                do Screen.drawPixel(leftX + a, leftY + b);
                if (Math.abs(difY) < Math.abs(difX)) {
                    let a = a + 1;
                    let difY = difY + dY;
                }
                else {
                    let b = b + 1;
                    let difX = difX + dX;
                }
            }
            return;
        }


        if(rightY < leftY ) {
            while( (~((a+leftX) > rightX)) & (~((b+leftY) < rightY)) ) {
                do Screen.drawPixel(leftX + a, leftY + b);
                if (difY < difX) {
                    let b = b - 1;
                    let difX = difX - dX;
                }
                else {
                    let a = a + 1;
                    let difY = difY + dY;
                }
            }
            return;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int diff,i;
        let diff = Math.abs(y1-y2);
        let i = 0;
        while(i < diff){
            do Screen.drawLine(x1, y1+i, x2 ,y1+i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int part_radius, cur_line_len, cur_x_l, cur_x_r, cur_y_d, cur_y_u;
        let part_radius = r;
        while ((part_radius > -1)){
            let cur_line_len = Math.sqrt((r*r) - (part_radius*part_radius));
            let cur_x_l = x - cur_line_len;
            let cur_x_r = x + cur_line_len;
            let cur_y_d = y - part_radius;
            let cur_y_u = y + part_radius;
            do Screen.drawLine(cur_x_l, cur_y_u, cur_x_r, cur_y_u);
            do Screen.drawLine(cur_x_l, cur_y_d, cur_x_r, cur_y_d);
            let part_radius = part_radius - 1;
            }
        return;
        }
}
