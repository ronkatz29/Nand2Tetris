// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     Mux16(a=y ,b=x ,sel=instruction[4] ,out=xory);
     ShiftLeft(in=xory, out=xyleft);
     ShiftRight(in=xory ,out=xyright);  
     Mux16(a=xyright ,b=xyleft ,sel=instruction[5] ,out=shiftout);

     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=ALUout, zr=ALUzr, ng=ALUng);

     Mux16(a=shiftout, b=ALUout, sel=instruction[8], out=out, out[0..7]=or1, out[8..15]=or2, out[15]= ng);

     Or8Way(in=or1, out=zr1);
     Or8Way(in=or2, out=zr2);
     Or(a=zr1, b=zr2, out=zr3);
     Not(in=zr3, out=zr);
}
